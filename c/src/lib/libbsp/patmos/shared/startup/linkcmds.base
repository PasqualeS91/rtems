/*  linkcmds
 *
 *  $Id$
 */

OUTPUT_ARCH(patmos)
__DYNAMIC  =  0;

/*
 * The memory map looks like this:
 * +--------------------+ <- low memory
 * | .text  	ROM		|
 * |        _text_start |
 * |        ctor list   | the ctor and dtor lists are for
 * |        dtor list   | C++ support
 * |        _etext      |
 * +--------------------+
 * | .data      RAM     | initialized data goes here
 * |        _sdata      |
 * |        _edata      |
 * +--------------------+
 * | .bss       RAM     |
 * |        __bss_start | start of bss, cleared by crt0
 * |        _end        | start of heap, used by sbrk()
 * +--------------------+
 * |    heap space      |
 * |        _ENDHEAP    |
 * |    stack space     | 
 * |        __stack     | top of stack
 * +--------------------+ <- high memory
 */

_RAM_END = _RAM_START + _RAM_SIZE;

_PROM_END = _PROM_START + _PROM_SIZE;

/*
 *  Alternate names without leading _.
 */

PROM_START = _PROM_START;
PROM_SIZE = _PROM_SIZE;
PROM_END = _PROM_END;

RAM_START = _RAM_START;
RAM_SIZE = _RAM_SIZE;
RAM_END = _RAM_END;

/*
 * stick everything in ram (of course)
 */
SECTIONS
{
   .text 0x0 :
	{
	text_start = . ;
	_text_start = . ;
        *(.text)
	. = ALIGN (16);

	/*
	 * Special FreeBSD sysctl sections.
	 */
	. = ALIGN (16);
	__start_set_sysctl_set = .;
	*(set_sysctl_*);
	__stop_set_sysctl_set = ABSOLUTE(.);
	*(set_domain_*);
	*(set_pseudo_*);

	*(.eh_fram)
	. = ALIGN (16);

	/*
	 * C++ constructors
	 */
	__CTOR_LIST__ = .;
	LONG((__CTOR_END__ - __CTOR_LIST__) / 4 - 2)
	*(.ctors)
	LONG(0)
	__CTOR_END__ = .;
	__DTOR_LIST__ = .;
	LONG((__DTOR_END__ - __DTOR_LIST__) / 4 - 2)
	*(.dtors)
	LONG(0)
	__DTOR_END__ = .;
	_etext = ALIGN( 0x10 ) ;
        }
        .data ADDR( .text ) + SIZEOF( .text ):
	{
	data_start = . ;
	_data_start = . ;
        *(.data)
	_edata = ALIGN( 0x10 ) ;
        }
        .bss ADDR( .data ) + SIZEOF( .data ):
        {
	bss_start = . ;
	_bss_start = . ;
	*(.bss)
	*(COMMON)
	end = . ;
	_end = . ;
	__end = . ;
	}
}
